<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python热更思路</title>
      <link href="/post/1654ffe7.html"/>
      <url>/post/1654ffe7.html</url>
      
        <content type="html"><![CDATA[<h1 id="python-热更思路"><a href="#python-热更思路" class="headerlink" title="python 热更思路"></a>python 热更思路</h1><h2 id="关于python类型的理解"><a href="#关于python类型的理解" class="headerlink" title="关于python类型的理解"></a>关于python类型的理解</h2><p>1、对于Python，最重要的一点理解是，万物皆对象。 Python 中的一切皆是对象，因此 Python 中的每个类本身也是一个对象，属于另外一个类的实例。Python中所有类都继承于这个object基类。</p><p>2、Object 类是所有 Python 对象的基类。在 Python 中，每个对象都是 Object 类的实例对象。因此，我们可以使用 Object 类中的方法和属性来操作和访问任何对象。</p><p>3、Class类是用于创建新类的类。当定义一个类的时候，这个类就是Class类的实例对象，但是这种说法不是很准确，准确来说，这个类的是Type类的实例对象，而不是Class类的实例对象。Class类和type类的关系是当每次使用Class创建新的类，python会自动调用type类的构造函数__new__()来创建一个新的类对象，并返回该对象的引用。然后，Python 解释器会进一步处理 class 语句中的代码，将其中定义的属性和方法等信息保存到该类对象的 dict 属性中。class 类本身并没有实例对象，可以将Class看做是用于创建类对象的语法糖。</p><p>4、Type类是元类，Python中所有类的元类，类的实例对象，Object类也是它的实例对象。可以理解成神话中的盘古，万物都是他演化的。<br>Object类可以理解为类的父类</p><p>这里不做过多的展开，需要记住，定义的Class是Type类的实例对象，保存有类的方法，属性，定义函数也是一个对象，可以使用dir来查看对象拥有的属性等</p><h2 id="代码层热更"><a href="#代码层热更" class="headerlink" title="代码层热更"></a>代码层热更</h2><p>通过动态执行一段代码完成逻辑更新</p><h3 id="修改全局变量"><a href="#修改全局变量" class="headerlink" title="修改全局变量"></a>修改全局变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Config模块</span></span><br><span class="line">GLOBAL_CONFIG_NAME = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&quot;a&quot;</span></span>):</span><br><span class="line">self.name = name</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getConfigName</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;config name &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGlobalConfigName</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;global config name &#123;&#125;&quot;</span>.<span class="built_in">format</span>(GLOBAL_CONFIG_NAME))</span><br><span class="line">config = Config(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure><p>热更代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更前&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 热更代码</span></span><br><span class="line">code=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import config</span></span><br><span class="line"><span class="string">config.GLOBAL_CONFIG_NAME = &quot;c&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更后&quot;</span>)</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---输出---</span></span><br><span class="line"><span class="comment"># 热更前</span></span><br><span class="line"><span class="comment"># global config name a</span></span><br><span class="line"><span class="comment"># 热更后</span></span><br><span class="line"><span class="comment"># global config name c</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类内函数更新"><a href="#类内函数更新" class="headerlink" title="类内函数更新"></a>类内函数更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更前&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 热更代码</span></span><br><span class="line">code=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import config</span></span><br><span class="line"><span class="string">def getGlobalConfigName(self):</span></span><br><span class="line"><span class="string">print(&quot;global config new name &#123;&#125;&quot;.format(&quot;d&quot;))</span></span><br><span class="line"><span class="string">config.Config.getGlobalConfigName = getGlobalConfigName</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(code)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更后&quot;</span>)</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---输出---</span></span><br><span class="line"><span class="comment"># 热更前</span></span><br><span class="line"><span class="comment"># global config name a</span></span><br><span class="line"><span class="comment"># 热更后</span></span><br><span class="line"><span class="comment"># global config new name d</span></span><br></pre></td></tr></table></figure><h3 id="函数有被其他地方引用"><a href="#函数有被其他地方引用" class="headerlink" title="函数有被其他地方引用"></a>函数有被其他地方引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入新的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConfigMgr</span>():</span><br><span class="line"><span class="keyword">def</span><span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.cbs = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self,cb</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">注册回调</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">self.cbs.add(cb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deregister</span>(<span class="params">self,cb</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">解除注册</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> cb <span class="keyword">in</span> self.cbs:</span><br><span class="line">self.cbs.remove(cb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callAllcbs</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">for</span> cb <span class="keyword">in</span> self.cbs:</span><br><span class="line">cb()</span><br></pre></td></tr></table></figure><p>热更代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更前&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line">mgr = config.ConfigMgr()</span><br><span class="line">mgr.register(config.config.getGlobalConfigName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 热更代码</span></span><br><span class="line">code=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import config</span></span><br><span class="line"><span class="string"># 取消注册</span></span><br><span class="line"><span class="string">mgr.deregister(config.config.getGlobalConfigName)</span></span><br><span class="line"><span class="string">def getGlobalConfigName(self):</span></span><br><span class="line"><span class="string">print(&quot;global config new name &#123;&#125;&quot;.format(&quot;d&quot;))</span></span><br><span class="line"><span class="string">config.Config.getGlobalConfigName = getGlobalConfigName</span></span><br><span class="line"><span class="string"># 重新注册</span></span><br><span class="line"><span class="string">mgr.register(config.config.getGlobalConfigName)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">exec</span>(code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更后&quot;</span>)</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line">mgr.callAllcbs()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---输出---</span></span><br><span class="line"><span class="comment"># 热更前</span></span><br><span class="line"><span class="comment"># global config name a</span></span><br><span class="line"><span class="comment"># 热更后</span></span><br><span class="line"><span class="comment"># global config new name d</span></span><br><span class="line"><span class="comment"># global config new name d</span></span><br></pre></td></tr></table></figure><h2 id="模块层热更"><a href="#模块层热更" class="headerlink" title="模块层热更"></a>模块层热更</h2><p>使用 importlib.reload(module) 函数，可以重新加载指定的模块 module，并更新模块中的代码。这样，我们就可以在同一个 Python 会话中多次修改和调试一个模块，而不需要重新启动整个解释器。</p><p>请注意，importlib.reload 函数只会重新加载指定的模块本身，而不会重新加载该模块所依赖的其他模块。如果你的模块依赖其他模块的更新，你可能需要手动重新加载这些依赖模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hotFix</span>():</span><br><span class="line"><span class="comment"># 中断程序</span></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.reload(config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更前&quot;</span>)</span><br><span class="line"><span class="comment"># 保存了旧的模块内的实例</span></span><br><span class="line">configOrigin = config.config</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line"><span class="comment"># 热更</span></span><br><span class="line"></span><br><span class="line">hotFix()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更后&quot;</span>)</span><br><span class="line"><span class="comment"># 判断模块内实例是否变了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;config 对象实例是否一致：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(config.config <span class="keyword">is</span> configOrigin))</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line">configOrigin.getGlobalConfigName()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---输出---</span></span><br><span class="line"><span class="comment"># 热更前</span></span><br><span class="line"><span class="comment"># global config name a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热更后</span></span><br><span class="line"><span class="comment"># config 对象实例是否改变：False</span></span><br><span class="line"><span class="comment"># reload after global config name a</span></span><br><span class="line"><span class="comment"># global config name a</span></span><br></pre></td></tr></table></figure><p>reload之后：<br>1、原全局变量会被覆盖掉，如果该全局变量对象的状态会被重置，导致程序失常。<br>2、重载后实例的类仍然是指向旧类</p><h3 id="全局变量处理"><a href="#全局变量处理" class="headerlink" title="全局变量处理"></a>全局变量处理</h3><ol><li>数据复原</li></ol><ul><li>在模块内写一个onReload函数，当模块被重新加载时，调用这个函数初始化一些状态</li><li>全局对象的类都提供一个初始化函数，在重载的时候调用<br>这种处理约束对开发约束很大，必须提前指定好规则。</li></ul><ol start="2"><li>引用复原<br>重载前模块的全局变量替换重载后的全局变量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hotFix</span>():</span><br><span class="line"><span class="comment"># 中断程序</span></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> FunctionType</span><br><span class="line">oldMoudel = <span class="built_in">__import__</span>(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">oldMoudelData = &#123;&#125;</span><br><span class="line">attrList = <span class="built_in">dir</span>(oldMoudel)</span><br><span class="line"><span class="comment"># 将旧模块的东西全部保存</span></span><br><span class="line"><span class="keyword">for</span> attrName <span class="keyword">in</span> attrList:</span><br><span class="line">oldMoudelData[attrName] = <span class="built_in">getattr</span>(oldMoudel, attrName)</span><br><span class="line"><span class="comment"># 重载模块</span></span><br><span class="line">importlib.reload(oldMoudel)</span><br><span class="line">newMoudle = <span class="built_in">__import__</span>(<span class="string">&quot;config&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> attrName <span class="keyword">in</span> <span class="built_in">dir</span>(newMoudle):</span><br><span class="line"><span class="keyword">if</span> attrName <span class="keyword">in</span> oldMoudelData:</span><br><span class="line"><span class="comment"># 自定义那些东西需要替换</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">type</span>) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], FunctionType) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">int</span>) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">float</span>) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">str</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">setattr</span>(newMoudle, attrName, oldMoudelData[attrName])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更前&quot;</span>)</span><br><span class="line"><span class="comment"># 保存了旧的模块内的实例</span></span><br><span class="line">configOrigin = config.config</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line"><span class="comment"># 热更</span></span><br><span class="line"></span><br><span class="line">hotFix()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更后&quot;</span>)</span><br><span class="line"><span class="comment"># 判断模块内实例是否变了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;config 对象实例是否一致：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(config.config <span class="keyword">is</span> configOrigin))</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line">configOrigin.getGlobalConfigName()</span><br></pre></td></tr></table></figure><h3 id="旧类的实例对象处理"><a href="#旧类的实例对象处理" class="headerlink" title="旧类的实例对象处理"></a>旧类的实例对象处理</h3><p>三种方式：</p><ul><li>重新生成实例</li><li>切换实例对象的类</li><li>对实例对象的类更新</li></ul><p>1、 重新生成实例对象，这个比较简单</p><p>2、切换实例对象的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hotFix</span>():</span><br><span class="line"><span class="comment"># 中断程序</span></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="comment"># 重载模块</span></span><br><span class="line">importlib.reload(config)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更前&quot;</span>)</span><br><span class="line"><span class="comment"># 保存了旧的模块内的实例</span></span><br><span class="line">configOrigin = config.config</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line"><span class="comment"># 热更</span></span><br><span class="line"></span><br><span class="line">hotFix()</span><br><span class="line"><span class="comment"># 换类</span></span><br><span class="line">configOrigin.__class__ = config.Config</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更后&quot;</span>)</span><br><span class="line"><span class="comment"># 判断模块内实例是否变了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;config 对象实例是否一致：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(config.config <span class="keyword">is</span> configOrigin))</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line">configOrigin.getGlobalConfigName()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---输出---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热更前</span></span><br><span class="line"><span class="comment"># reload global config name a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热更后</span></span><br><span class="line"><span class="comment"># config 对象实例是否一致：False</span></span><br><span class="line"><span class="comment"># reload after global config name a</span></span><br><span class="line"><span class="comment"># reload after global config name a</span></span><br></pre></td></tr></table></figure><p>实现这种方法:</p><ul><li>必须额外写代码，这不是纯粹的模块层更新了</li><li>要找到所有该类的对象</li></ul><p>3、对实例对象的类更新<br>不改变实例对象对旧类的引用，将旧类内的类函数等引用修改指向新类的类函数，并且在新模块内的新类指向旧类，因为此时旧类的函数等引用都指向了新的函数，完成热更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hotFix</span>():</span><br><span class="line"><span class="comment"># 中断程序</span></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> FunctionType</span><br><span class="line">oldMoudel = <span class="built_in">__import__</span>(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">oldMoudelData = &#123;&#125;</span><br><span class="line">attrList = <span class="built_in">dir</span>(oldMoudel)</span><br><span class="line"><span class="comment"># 将旧模块的东西全部保存</span></span><br><span class="line"><span class="keyword">for</span> attrName <span class="keyword">in</span> attrList:</span><br><span class="line">oldMoudelData[attrName] = <span class="built_in">getattr</span>(oldMoudel, attrName)</span><br><span class="line"><span class="comment"># 重载模块</span></span><br><span class="line">importlib.reload(oldMoudel)</span><br><span class="line">newMoudle = <span class="built_in">__import__</span>(<span class="string">&quot;config&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> attrName <span class="keyword">in</span> <span class="built_in">dir</span>(newMoudle):</span><br><span class="line"><span class="keyword">if</span> attrName <span class="keyword">in</span> oldMoudelData:</span><br><span class="line"><span class="comment"># 自定义那些东西需要替换</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">type</span>) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], FunctionType) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">int</span>) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">float</span>) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">str</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">isinstance</span>(oldMoudelData[attrName], <span class="built_in">type</span>):</span><br><span class="line">ReplaceClassFunc(<span class="built_in">getattr</span>(newMoudle, attrName), oldMoudelData[attrName])</span><br><span class="line"><span class="built_in">setattr</span>(newMoudle, attrName, oldMoudelData[attrName])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">setattr</span>(newMoudle, attrName, oldMoudelData[attrName])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ReplaceClassFunc</span>(<span class="params">srcClass, desClass</span>):</span><br><span class="line"><span class="keyword">for</span> attrName <span class="keyword">in</span> <span class="built_in">dir</span>(srcClass):</span><br><span class="line">attr = <span class="built_in">getattr</span>(srcClass, attrName)</span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> FunctionType</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(attr, FunctionType) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(attr, <span class="built_in">int</span>) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(attr, <span class="built_in">float</span>) \</span><br><span class="line"><span class="keyword">or</span> <span class="built_in">isinstance</span>(attr, <span class="built_in">str</span>):</span><br><span class="line"><span class="built_in">setattr</span>(desClass, attrName, attr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更前&quot;</span>)</span><br><span class="line"><span class="comment"># 保存了旧的模块内的实例</span></span><br><span class="line">configOrigin = config.config</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line"><span class="comment"># 热更</span></span><br><span class="line"></span><br><span class="line">hotFix()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;热更后&quot;</span>)</span><br><span class="line"><span class="comment"># 判断模块内实例是否变了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;config 对象实例是否一致：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(config.config <span class="keyword">is</span> configOrigin))</span><br><span class="line">config.config.getGlobalConfigName()</span><br><span class="line">configOrigin.getGlobalConfigName()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---输出---</span></span><br><span class="line"><span class="comment"># 热更前</span></span><br><span class="line"><span class="comment"># reload global config name a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 热更后</span></span><br><span class="line"><span class="comment"># config 对象实例是否一致：False</span></span><br><span class="line"><span class="comment"># reload after global config name a</span></span><br><span class="line"><span class="comment"># reload after global config name a</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 热更 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust 数据结构的内存布局</title>
      <link href="/post/655fcddc.html"/>
      <url>/post/655fcddc.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要了解内存布局"><a href="#为什么要了解内存布局" class="headerlink" title="为什么要了解内存布局"></a>为什么要了解内存布局</h2><p>1、因为rust有自己的所有权规则，为了提高性能，有时候赋值数据并不是深拷贝。<br>2、rust类型可以从size方面划分为两种，一种是在编译器知道size大小，另一种是动态size大小（DST），在某些时候这些概念可能难以理解。从底层了解内存布局后，会让我们对rust的一些优秀实现思想有所了解。<br>3、学过C&#x2F;C++的同学应该对内存会更熟悉一些</p><h2 id="存在栈中的类型"><a href="#存在栈中的类型" class="headerlink" title="存在栈中的类型"></a>存在栈中的类型</h2><p>只有在编译期确定大小的类型才会分配在栈上<br>在栈上为函数分配的内存称为栈帧栈上分配内存只需要移动栈指针，不需要任何系统调用，非常快</p><h3 id="i32"><a href="#i32" class="headerlink" title="i32"></a>i32</h3><p> i32类型需要4个字节</p><h2 id="存在堆上"><a href="#存在堆上" class="headerlink" title="存在堆上"></a>存在堆上</h2><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><p><img src="https://s2.loli.net/2023/09/13/7Z6sC5qAavDINby.png" alt="box-type.png"></p><p>Box类型是智能指针，在栈上只存了一个指针，64为系统就是8个字节，指针指向的数据存在在堆中，如果是一个I32，则在堆上需要4个字节，在rust中堆内存分配的定义在GlobalAlloc trait中。（注：当使用Box时，内存分配器并不一定使用系统调用，内存分配器会以块的形式请求内存，减少系统调用次数，同时内存释放时也不一定就返回给了系统，内存分配器会管理记录使用和未使用的内存。）</p><p><img src="https://s2.loli.net/2023/09/13/RbMTDSahm3rz1XU.png" alt="rust堆内存分配定义.png"></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="comment">// 在rust中赋值会发生堆内存拷贝</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">heap</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">heap</span>()<span class="punctuation">-&gt;</span><span class="type">Box</span>&lt;<span class="type">i32</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="number">23</span>);</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="有符号和无符号整型"><a href="#有符号和无符号整型" class="headerlink" title="有符号和无符号整型"></a>有符号和无符号整型</h3><p>rust的整数显示了整数的内存占用位数，例如i32、i8、u8、在内存中分别占4、1、1个字节。isize，usize类型在不同平台上占字节不同，在32位系统上占4个字节，64位系统占8个字节。</p><p><img src="https://s2.loli.net/2023/09/13/36F9lQZt4gmSP1N.png" alt="整数类型.png"></p><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>char类型存储的是Unicode，在内存中占4个字节</p><p><img src="https://s2.loli.net/2023/09/13/HY1uwfUxkygCBiV.png" alt="char类型.png"></p><h3 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h3><p>元组类型如果成员都是存在<strong>栈</strong>上的，元组类型的数据也是在栈上顺序排列，但是因为有内存对齐的原因。所以元组所占的内存有时并不等于所有成员的和。（内存对齐是为了方便CPU快速访问，另一方面也是节省内存）</p><p><img src="https://s2.loli.net/2023/09/13/j4KaGWsz9iMRmYw.png" alt="元组类型.png"></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span>:(<span class="type">char</span>,<span class="type">u8</span>,<span class="type">i32</span>) = (<span class="string">&#x27;a&#x27;</span>,<span class="number">7</span>,<span class="number">345</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查类型内存大小</span></span><br><span class="line">std::mem::size_of::&lt;T&gt;();</span><br><span class="line"><span class="comment">// 检查类型的对齐值，（该类型分配的总字节应该是对齐值的整倍）</span></span><br><span class="line">std::mem::align_of::&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">std::mem::size_of::&lt;(<span class="type">char</span>,<span class="type">u8</span>,<span class="type">i32</span>)&gt;();<span class="comment">// 12</span></span><br><span class="line">std::mem::align_of::&lt;(<span class="type">char</span>,<span class="type">u8</span>,<span class="type">i32</span>)&gt;();<span class="comment">// 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="借用类型-T-和-mut-T"><a href="#借用类型-T-和-mut-T" class="headerlink" title="借用类型 &amp;T 和&amp;mut T"></a>借用类型 &amp;T 和&amp;mut T</h3><p>很多人对引用类型不是很理解。<br>引用类型存储在<strong>栈</strong>上，本身就是一个指针，值是地址，所以需要机器字长来存储，在64位系统上就是8个字节。<br>可变引用和引用在内存结构上是一样的，他们的区别在于他们的<code>使用方式</code>和<code>编译器对他们施加的约束，限制</code>。<br>所以，我们可以这样理解引用：<strong>带有约束的指针</strong>。</p><p><img src="https://s2.loli.net/2023/09/13/l1Tyc3fPdwEnVBQ.png" alt="引用类型.png"></p><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><h4 id="定长数组"><a href="#定长数组" class="headerlink" title="定长数组"></a>定长数组</h4><p><code>let a:[i32;3] = [55,66,77]</code> 数组是大小固定的，和其他语言一样，数组是连续的内存。存储在栈上</p><p><img src="https://s2.loli.net/2023/09/13/PeLMBWi49qtN5nR.png" alt="数组类型.png"></p><h4 id="动态数组-Vector"><a href="#动态数组-Vector" class="headerlink" title="动态数组 Vector"></a>动态数组 Vector</h4><p><code>let v: Vec&lt;i32&gt; = vec![55,66,77];</code><br>动态数组大小可变，数据存在堆上，同时在栈上存储了堆数据的地址（指针）、容量、长度len,每一部分的大小都是一个机器字长，64位系统就是8个字节。注意，vec在栈上的大小始终是固定的，</p><h3 id="slice-切片-T-和-切片引用-T"><a href="#slice-切片-T-和-切片引用-T" class="headerlink" title="slice 切片[T] 和 切片引用&amp;[T]"></a>slice 切片[T] 和 切片引用&amp;[T]</h3><p>首先最重要的是我们需要搞清楚基本概念，切片是切片类型，切片引用是引用类型。是不同的类型。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切片</span></span><br><span class="line"> <span class="keyword">let</span> <span class="variable">s1</span>:[<span class="type">i32</span>] = a[<span class="number">0</span>..<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片引用</span></span><br><span class="line"> <span class="keyword">let</span> &amp;s2:[<span class="type">i32</span>] = &amp;a[<span class="number">0</span>..<span class="number">2</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>切片是数组底层数据元素的部分视图，切片没有指定元素的数量。所以在编译时，也不知道切片分配要分配多少字节，所以不能保存在变量中因为大小未知，不能分配在栈上。是动态大小类型（DST）。</p><p>切片引用是引用。我们知道引用是一个指针，存储数据地址,这里有个特殊情况，当rust对动态大小类型引用时(slice,str等)，除了会存储数据地址外，还会额外使用一个机器字长存储数据的长度。这种引用也称为胖指针（因为存储了附加信息）。</p><p>切片引用使用了两个字长存储胖指针，大小确定，所以可以存在栈上。我们一般使用的都是切片引用</p><p><img src="https://s2.loli.net/2023/09/13/xgB2Wtr1uX5Hizf.png" alt="切片和切片引用.png"></p><h3 id="字符串-String-str-str"><a href="#字符串-String-str-str" class="headerlink" title="字符串 String str &amp;str"></a>字符串 String str &amp;str</h3><p>首先明确，字符串切片和字符串切片引用是不同的</p><p><img src="https://s2.loli.net/2023/09/13/jRKtEHO6uM9UoNg.png" alt="字符串和字符串切片.png"></p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p><code>let s1 = String::from(&quot;hello&quot;);</code><br>String底层使用Vec实现的，所以和vec内存布局相同，和vec区别，字符串必须是UTF8编码。</p><h4 id="str-字符串切片"><a href="#str-字符串切片" class="headerlink" title="str 字符串切片"></a>str 字符串切片</h4><p><code>let s2: &amp;str = &quot;hello&quot;;</code><br>字符串切片是存在程序的只读区的（未指定具体在那个段，可能在代码段），这点和其他语言类似，有着’static生命周期</p><h4 id="str-字符串切片引用"><a href="#str-字符串切片引用" class="headerlink" title="&amp;str 字符串切片引用"></a>&amp;str 字符串切片引用</h4><p>跟切片引用类似，字符串切片的引用也是一个胖指针，存储数据的起始内存地址和数据长度</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// 切片操作，返回字符切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里会编译错误，因为切片类型是不知道大小的</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span>: Str = s1[<span class="number">1</span>..<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用引用</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span>: &amp;Str = &amp;s1[<span class="number">1</span>..<span class="number">3</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结构体-struct"><a href="#结构体-struct" class="headerlink" title="结构体 struct"></a>结构体 struct</h3><p>rust有多种结构体</p><h4 id="命名字段的结构体"><a href="#命名字段的结构体" class="headerlink" title="命名字段的结构体"></a>命名字段的结构体</h4><p>结构体在栈上的布局相当与将他的各个成员相邻排列，也会有内存对齐</p><p><img src="https://s2.loli.net/2023/09/13/Gbcu9rPxKLS52MW.png" alt="命名字段结构体.png"></p><h4 id="元组结构体"><a href="#元组结构体" class="headerlink" title="元组结构体"></a>元组结构体</h4><p>类似元组布局</p><h4 id="单元结构体"><a href="#单元结构体" class="headerlink" title="单元结构体"></a>单元结构体</h4><p>单元结构体没有任何数据，编译器不会为它分配任何数据</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>rust有多种枚举表示方式</p><h4 id="c风格枚举"><a href="#c风格枚举" class="headerlink" title="c风格枚举"></a>c风格枚举</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">HTTPStatus</span> &#123;</span><br><span class="line">    OK,</span><br><span class="line">    NotFound,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以指定整数枚举值</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">HTTPStatus</span> &#123;</span><br><span class="line">    OK = <span class="number">200</span>,</span><br><span class="line">    NotFound = <span class="number">404</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/13/QWr1dtZKeV483hu.png" alt="C风格枚举.png"></p><p>在内存中它们被存储为从0开始的整数标记，rust会选择能够存储该枚举类型的最大枚举变体的最短整形。<br>在这里枚举最大值为1，所以只需要1个字节就可以，指定枚举整数值后，就至少需要2个字节来存</p><h4 id="rust风格"><a href="#rust风格" class="headerlink" title="rust风格"></a>rust风格</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    Empty,</span><br><span class="line">    <span class="title function_ invoke__">Number</span>(<span class="type">i32</span>),</span><br><span class="line">    <span class="title function_ invoke__">Array</span>(<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/13/v9NGSkgpzEPuht8.png" alt="枚举占用内存.png"></p><p>我们首先分析<code>Array(Vec&lt;i32&gt;)</code>这个变体，这个变体的位置是第三个，所以枚举整数标记是2，需要1个字节，然后还包括了一个<code>Vec</code>,我们之前了解过Vec内存在栈上是3个usize,在64位系统上需要24个字节，加上内存对齐，整个<code>Array(Vec&lt;i32&gt;)</code>需要32个字节<br><code>Number(i32)</code>它存储一个整数，然后再加一个<code>i32</code>，一共5个字节，因为，所有枚举变体都具有相同的大小，编译器会自动填充到32字节。<br><code>Empty</code>同样，只需要一个整数标记1字节，但是也会填充到32字节。<br>枚举的大小由其最大的变体决定。</p><p>减少枚举占用内存的方法，减少最大的变体内存<br>例如将<code>Array(Vec&lt;i32&gt;)</code>变为<code>Array(Box&lt;Vec&lt;i32&gt;&gt;)</code>,新的内存只需要16个字节。枚举整体内存也减少一半</p><p><img src="https://s2.loli.net/2023/09/13/tQkGwz3mpfCiDqZ.png" alt="减少枚举内存.png"></p><h4 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h4><p><img src="https://s2.loli.net/2023/09/13/icE4xzFGY7nbSPB.png" alt="Option.png"><br>正常<code>Option</code>和其他枚举是同样的内存结构，当Option中的值是一个Box或者其他智能指针。因为任何智能指针的值都不能是0.所以rust编译器使用一个<code>usize</code>表示<code>Option&lt;Box&lt;i32&gt;&gt;</code>，不再使用整数标记。使用指针为0来代表<code>None</code>,不为0就是<code>Some</code>.</p><p>更优化的内存<br><img src="https://s2.loli.net/2023/09/13/HArdztwq9GSYvi1.png" alt="优化Option.png"></p><h3 id="copy-和-move"><a href="#copy-和-move" class="headerlink" title="copy 和 move"></a>copy 和 move</h3><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>对于只在栈上的数据，赋值操作rust使用copy,按位拷贝</p><h4 id="move"><a href="#move" class="headerlink" title="move"></a>move</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span>:<span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = <span class="built_in">vec!</span>[</span><br><span class="line">    <span class="string">&quot;hello&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">    <span class="string">&quot;world&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v2</span> = v;</span><br></pre></td></tr></table></figure><p>对于像String,Vec这种数据结构，一部分存在栈上，数据存在堆上的，赋值操作使用的是move，只会拷贝栈上的部分，原来变量内的指针，和新变量的指针都指向同一个地址，但是rust有所有权机制，如果同一内存释放两次会出问题，所以，move操作后此时变量的所有权发生了转移，原来的变量已经失效了，就不会存在重复释放问题。</p><p>我们也可以进行深拷贝在需要的时候，使用clone方法。</p><p>有时我们需要多个变量拥有同一份数据的，可以使用<code>Rc</code>引用计数</p><p><img src="https://s2.loli.net/2023/09/13/CHE4aVlAcponUxI.png" alt="move.png"></p><h3 id="特征对象"><a href="#特征对象" class="headerlink" title="特征对象"></a>特征对象</h3><p>可以有多种方法，把具体对象转换成特征对象，例如赋值，在内存中，特征对象<code>&amp;mut dyn Write</code>是一个胖指针，它由两个普通指针组成。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::Write;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buffer</span>: <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt; = <span class="built_in">vec!</span>[];</span><br><span class="line"><span class="comment">// 引用形式的特征对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">w</span>: &amp;<span class="keyword">mut</span> <span class="keyword">dyn</span> Write = &amp;<span class="keyword">mut</span> buffer</span><br><span class="line"><span class="comment">// 智能指针形式特征对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">w2</span>: <span class="type">Box</span>&lt;<span class="keyword">dyn</span> Write&gt; = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(buffer);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>特征对象的第一个指针指向值，在这里就是Vec，第二个指针指向一个虚表vtable，这个表有值类型的信息，vtable在编译时生成，由相同类型的所有对象共享，虚表包含一系列函数指针，指向特征的方法，当调用特征方法时，会自动使用虚表。<br><code>dyn Write</code> 也是动态大小类型，和切片一样，所以我们总是用他的引用。<br>rust可以将普通引用变为trait对象，同时也能将智能指针(Box,Rc等)变为trait对象。这种情况下，内存结构就变成了胖指针。</p><p>其实无论是引用还是智能指针，rust将他们转为特征对象时，rust都知道他们的类型，只是给它们添加了一个vtable地址，就将常规指针转为胖指针</p><p><img src="https://s2.loli.net/2023/09/13/2WlVM5kzc3QsL1B.png" alt="特征对象.png"></p><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span>: <span class="title function_ invoke__">fn</span>()<span class="punctuation">-&gt;</span><span class="type">bool</span> = test_func;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">test_func</span>()<span class="punctuation">-&gt;</span><span class="type">bool</span>&#123;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个函数指针只需要一个usize来存储函数的机器码地址</p><h3 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包 closure"></a>闭包 closure</h3><p>rust没有具体的闭包类型，通过定义了三个trait来实现闭包<br><code>Fn,FnOnce,FnMut</code>，rust把闭包转换成了结构体。所以内存布局就是闭包捕获的变量。</p><h4 id="fnOnce"><a href="#fnOnce" class="headerlink" title="fnOnce"></a>fnOnce</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="title function_ invoke__">crate_closure</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">crate_closure</span>() <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">FnOnce</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    || &#123;</span><br><span class="line">        <span class="title function_ invoke__">drop</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FnOnce</code> 只是一个特征，它定义了对象的行为和方法。<br>rust内部使用结构体来表示闭包,rust会根据使用的变量创建一个适当的结构体，并为该结构体实现最合适的特征</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rust 内部结构体表示闭包的简略代码</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyClosure</span>&#123;</span><br><span class="line">    name: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">FnOnce</span> <span class="keyword">for</span> <span class="title class_">MyClosure</span> &#123;</span><br><span class="line">    <span class="comment">// FnOnce 必须实现的方法，因为只调用一次，所以使用self作为参数</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">call_once</span>(<span class="keyword">self</span>)&#123;</span><br><span class="line">       <span class="title function_ invoke__">drop</span>(<span class="keyword">self</span>.name) </span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/13/dBOFmwTQJe6GXoA.png" alt="FnOnce.png"></p><h4 id="FnMut"><a href="#FnMut" class="headerlink" title="FnMut"></a>FnMut</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span>: <span class="type">i32</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// f 必须时mut的，因为闭包的实现里需要&amp;mut self作为参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = ||&#123;</span><br><span class="line">    i+=<span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="title function_ invoke__">f</span>();</span><br><span class="line"><span class="title function_ invoke__">f</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i) <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rust 内部结构体表示闭包的简略代码</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyClosure</span>&#123;</span><br><span class="line">    i: &amp;<span class="keyword">mut</span> <span class="type">i32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">FnMut</span> <span class="keyword">for</span> <span class="title class_">MyClosure</span> &#123;</span><br><span class="line">    <span class="comment">// FnMut 必须实现的方法，因为要修改值，所以使用&amp;mut self作为参数</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">call_mut</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>)&#123;</span><br><span class="line">       *<span class="keyword">self</span>.i +=<span class="number">1</span>; </span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/13/7KWRaeYzCd8qcLS.png" alt="FnMut.png"></p><h4 id="Fn"><a href="#Fn" class="headerlink" title="Fn"></a>Fn</h4><p>与上边不同的是参数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">crate_closure</span>() <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">Fn</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">msg</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rust 内部结构体表示闭包的简略代码</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyClosure</span>&#123;</span><br><span class="line">    i: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Fn</span> <span class="keyword">for</span> <span class="title class_">MyClosure</span> &#123;</span><br><span class="line">    <span class="comment">// Fn 必须实现的方法，不可变借用，所以使用&amp;self作为参数</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">call</span>(&amp;<span class="keyword">self</span>)&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/13/p18q5V9sOASrdvY.png" alt="Fn.png"></p>]]></content>
      
      
      <categories>
          
          <category> rust基础 </category>
          
          <category> rust专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust内存布局 </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
